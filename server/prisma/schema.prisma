// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String   @id @default(uuid())
  email              String   @unique
  password           String
  name               String
  bio                String?
  avatar             String?
  role               String?
  location           String?
  website            String?
  githubUrl          String?
  linkedinUrl        String?
  twitterUrl         String?
  isOnline           Boolean  @default(false)
  lastActive         DateTime @default(now())
  experience         String?
  hourlyRate         Int?
  isAvailable        Boolean  @default(true)
  availabilityStatus String?  @default("AVAILABLE")
  rating             Float    @default(0)
  completedProjects  Int      @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  skills              Skill[]
  posts               Post[]
  ownedProjects       Project[]            @relation("ProjectOwner")
  projectMembers      ProjectMember[]
  projectInvitations  ProjectInvitation[]
  likes               Like[]
  comments            Comment[]
  sentConnections     Connection[]         @relation("ConnectionRequester")
  receivedConnections Connection[]         @relation("ConnectionReceiver")
  sentMessages        Message[]            @relation("MessageSender")
  conversations       ConversationMember[]
  notifications       Notification[]

  @@map("users")
}

model Skill {
  id     String     @id @default(uuid())
  name   String
  level  SkillLevel
  userId String
  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("skills")
}

model Post {
  id          String   @id @default(uuid())
  type        PostType
  content     String
  codeSnippet String?
  language    String?
  mediaUrls   String[]
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isEdited    Boolean  @default(false)

  // Relations
  likes    Like[]
  comments Comment[]

  @@map("posts")
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@map("likes")
}

model Comment {
  id        String    @id @default(uuid())
  content   String
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  parentId  String? // For nested comments
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("CommentReplies")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isEdited  Boolean   @default(false)

  @@map("comments")
}

model Connection {
  id          String           @id @default(uuid())
  requesterId String
  requester   User             @relation("ConnectionRequester", fields: [requesterId], references: [id], onDelete: Cascade)
  receiverId  String
  receiver    User             @relation("ConnectionReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  status      ConnectionStatus
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@unique([requesterId, receiverId])
  @@map("connections")
}

model Project {
  id          String        @id @default(uuid())
  name        String
  description String?
  githubUrl   String?
  ownerId     String
  owner       User          @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  status      ProjectStatus @default(PLANNING)
  isRemote    Boolean       @default(true)
  budget      String?
  duration    String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  members     ProjectMember[]
  tasks       Task[]
  invitations ProjectInvitation[]

  @@map("projects")
}

model ProjectMember {
  id        String      @id @default(uuid())
  projectId String
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      ProjectRole
  createdAt DateTime    @default(now())

  @@unique([projectId, userId])
  @@map("project_members")
}

model Task {
  id          String     @id @default(uuid())
  title       String
  description String?
  status      TaskStatus
  priority    Priority
  projectId   String
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assigneeId  String?
  dueDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("tasks")
}

// New models for extended features

model ProjectInvitation {
  id          String            @id @default(uuid())
  projectId   String
  project     Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  developerId String
  developer   User              @relation(fields: [developerId], references: [id], onDelete: Cascade)
  role        ProjectInviteRole
  message     String?
  status      InvitationStatus  @default(PENDING)
  sentAt      DateTime          @default(now())
  respondedAt DateTime?

  @@unique([projectId, developerId])
  @@map("project_invitations")
}

model Conversation {
  id        String           @id @default(uuid())
  type      ConversationType
  name      String?
  isGroup   Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  members  ConversationMember[]
  messages Message[]

  @@map("conversations")
}

model ConversationMember {
  id             String       @id @default(uuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  joinedAt       DateTime     @default(now())
  lastReadAt     DateTime?
  isPinned       Boolean      @default(false)
  isArchived     Boolean      @default(false)

  @@unique([conversationId, userId])
  @@map("conversation_members")
}

model Message {
  id             String       @id @default(uuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  senderId       String
  sender         User         @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  content        String
  type           MessageType  @default(TEXT)
  fileUrl        String?
  fileName       String?
  isRead         Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("messages")
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      NotificationType
  title     String
  message   String
  data      Json?
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  @@map("notifications")
}

model Analytics {
  id        String   @id @default(uuid())
  userId    String
  projectId String?
  type      String // 'project_view', 'task_completed', 'message_sent', etc.
  data      Json
  createdAt DateTime @default(now())

  @@map("analytics")
}

// Enums
enum SkillLevel {
  PRIMARY
  SECONDARY
}

enum PostType {
  TEXT
  MEDIA
  CODE
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ProjectRole {
  OWNER
  ADMIN
  MEMBER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  COMPLETED
  ON_HOLD
}

enum ProjectInviteRole {
  FRONTEND
  BACKEND
  FULLSTACK
  DESIGNER
  DEVOPS
  MOBILE
  TESTER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum ConversationType {
  DIRECT
  GROUP
}

enum MessageType {
  TEXT
  IMAGE
  FILE
}

enum NotificationType {
  CONNECTION_REQUEST
  PROJECT_INVITE
  COMMENT
  MENTION
  SYSTEM
  MESSAGE
}
